#version 450
layout (local_size_x = 512) in;

layout(binding = 7, std140) uniform LogUniformBlock {
    uint maxNoOfLogs;
};
layout(binding = 1) coherent buffer CounterBlock {
    uint fragmentCounter;
    uint logCounter;
};
layout(binding = 2) buffer ArrayBlock {
    ivec4 voxelList[];
};

struct LogStruct {
    vec4 position;
    vec4 color;
    uint nodeIndex;
    uint brickPtr;
    uint index1;
    uint index2;
};

layout(binding = 7) volatile buffer LogBlock {
    LogStruct logList[];
};

layout(binding = 0, r32ui) uniform uimage3D rgColorBrick;
layout(binding = 1, r32ui) uniform uimage3D baColorBrick;
layout(binding = 2, r32ui) uniform uimage3D xyNormalBrick;
layout(binding = 3, r32ui) uniform uimage3D zwNormalBrick;
layout(binding = 4, RGBA8) uniform image3D colorBrick;
layout(binding = 5, RGBA8) uniform image3D normalBrick;
layout(binding = 7, r32ui) uniform uimage3D fragmentImageCounter;

void logFragment(vec4 pos, vec4 color, uint nodeIndex, uint brickPtr, uint index1, uint index2) {
    uint index = atomicAdd(logCounter, 1);
    if(index < maxNoOfLogs) {        
        logList[index].position = pos;
        logList[index].color = color;
        logList[index].nodeIndex = nodeIndex;
        logList[index].brickPtr = brickPtr;
        logList[index].index1 = index1;
        logList[index].index2 = index2;
    } else {
        atomicAdd(logCounter, uint(-1));
    }
}

void main() {
  if(gl_GlobalInvocationID.x < fragmentCounter) {
        ivec3 voxelPos = voxelList[gl_GlobalInvocationID.x].xyz; 

        float count = float(imageLoad(fragmentImageCounter, voxelPos).r);
        vec2 rg = unpackUnorm2x16(imageLoad(rgColorBrick, voxelPos).r);
        vec2 ba = unpackUnorm2x16(imageLoad(baColorBrick, voxelPos).r);
        vec4 color = vec4(rg, ba);
        
        vec4 avgColor = (color/count); 
        imageStore(colorBrick, voxelPos, avgColor);

        vec2 normalxy = unpackUnorm2x16(imageLoad(xyNormalBrick, voxelPos).r);
        vec2 normalzw = unpackUnorm2x16(imageLoad(zwNormalBrick, voxelPos).r);
        vec4 normal = vec4(normalxy, normalzw);

        vec4 avgNormal = (normal/count);
        imageStore(normalBrick, voxelPos, avgNormal);      
    }
}