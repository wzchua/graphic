#version 450
#extension GL_ARB_shader_atomic_counter_ops : require

layout (local_size_x = 512) in;
layout(binding = 0) uniform atomic_uint fragListPtr;
//initlized at 1
layout(binding = 1) uniform atomic_uint nodePtr;
// 0
layout(binding = 2) uniform atomic_uint brickPtrX;
layout(binding = 3) uniform atomic_uint logPtr;

struct FragmentStruct {
    vec4 position;
    vec4 color;
};

layout(binding = 0) buffer FragmentListBlock {
    FragmentStruct frag[];
};

layout(binding = 1) buffer FragmentListBlock2 {
    FragmentStruct frag2[];
};

struct NodeStruct {
    uint childPtr;
    uint brickPtrX;
    uint parentPtr;
};

layout(binding = 2) volatile buffer NodeBlock {
    NodeStruct node[];
};

struct LogStruct {
    vec4 position;
    vec4 color;
    uint nodeIndex;
    uint brickPtr;
    uint index1;
    uint index2;
};

layout(binding = 3) volatile buffer LogBlock {
    LogStruct logList[];
};

layout(binding = 0, RGBA8) uniform image3D texture3D;
layout(binding = 1, r32ui) uniform uimage3D lock3D;

uniform uint noOfFragments;
uniform uint maxNoOfLogs;

uniform uint ISPROCESS = 0 - 1;
uniform uint LEAF = 0 - 2;

void deferFragment() {
    uint index = atomicCounterIncrement(fragListPtr);
    frag2[index] = frag[gl_GlobalInvocationID.x];
}

void logFragment(vec4 pos, vec4 color, uint nodeIndex, uint brickPtr, uint index1, uint index2) {
    if(atomicCounter(logPtr) < maxNoOfLogs) {        
        uint index = atomicCounterIncrement(logPtr);
        logList[index].position = pos;
        logList[index].color = color;
        logList[index].nodeIndex = nodeIndex;
        logList[index].brickPtr = brickPtr;
        logList[index].index1 = index1;
        logList[index].index2 = index2;
    }
}

uint getPtrOffset(ivec3 frameOffset) {
    return min(frameOffset.x, 1) * 1 
    + min(frameOffset.y, 1) * 2 + min(frameOffset.z, 1) * 4;
}

uniform float levels[10] = float[10](0.001953125f, 0.00390625f, 0.0078125f,
                                0.015625f, 0.03125f, 0.0625f,
                                0.125f, 0.25f, 0.5f, 1.0f);

ivec3[10] computeLevelOffset() {
    ivec3 frameOffset = ivec3(0);
    ivec3 prevFrameOffset = ivec3(0);
    ivec3 levelOffsets[10];
    vec3 position = vec3(frag[gl_GlobalInvocationID.x].position);
    for(int i = 0; i < 10; i++) {
        prevFrameOffset = frameOffset * 2;
        frameOffset = ivec3(position * levels[i]);
        levelOffsets[i] = frameOffset - prevFrameOffset;
    }
    return levelOffsets;
}

uint enterNode(uint nodeIndex, uint offset) {
    uint childIndex = atomicCompSwap(node[nodeIndex].childPtr, 0, ISPROCESS);
    if(childIndex == 0) {
        childIndex = atomicCounterAddARB(nodePtr, 8);
        node[nodeIndex].brickPtrX = atomicCounterIncrement(brickPtrX);
        atomicCompSwap(node[nodeIndex].childPtr, ISPROCESS, childIndex);
        for(int i = 0; i < 8; i++) {
            node[childIndex + i].parentPtr = nodeIndex;
        }
        memoryBarrier();
        return childIndex + offset;
    } else if(childIndex == ISPROCESS) {
        deferFragment();
        return ISPROCESS;
    } else {
        return childIndex + offset;
    }
}

uint enterLeaf(uint nodeIndex, uint offset) {
    uint childIndex = atomicCompSwap(node[nodeIndex].childPtr, 0, ISPROCESS);
    if(childIndex == 0) {
        childIndex = atomicCounterAddARB(nodePtr, 8);
        node[nodeIndex].brickPtrX = atomicCounterIncrement(brickPtrX);
        for(int i = 0; i < 8; i++) {
            node[childIndex + i].childPtr = LEAF;
            node[childIndex + i].parentPtr = nodeIndex;
        }
        atomicCompSwap(node[nodeIndex].childPtr, ISPROCESS, childIndex);
        memoryBarrier();
    } else if(childIndex == ISPROCESS) {
        deferFragment();
        return ISPROCESS;
    }
    
    uint brickState = atomicCompSwap(node[childIndex + offset].brickPtrX, 0, ISPROCESS);
    if(brickState == 0) {
        uint brickPtr = atomicCounterIncrement(brickPtrX);
        atomicCompSwap(node[childIndex + offset].brickPtrX, ISPROCESS, brickPtr);
        memoryBarrier();
    } else if(brickState == ISPROCESS){
        deferFragment();
        return ISPROCESS;
    }
    
    return childIndex + offset;
}

uniform int lowestLevel = 9;
void main() {
    //frag position in 0 to 512 range
    if(gl_GlobalInvocationID.x < noOfFragments) {
        ivec3 levelOffsets[10] = computeLevelOffset();

        uint nodeIndex = 0;
        // start in root node
        int currentLevel = 0;

        while(currentLevel < lowestLevel - 1) {         
            // move to next node  
            currentLevel++;
            nodeIndex = enterNode(nodeIndex, getPtrOffset(levelOffsets[currentLevel]));
            if(nodeIndex == ISPROCESS){
                return;
            }
        }
        nodeIndex = enterLeaf(nodeIndex, getPtrOffset(levelOffsets[lowestLevel]));
        if(nodeIndex == ISPROCESS){
            return;
        }

        uint state = atomicCompSwap(node[nodeIndex].childPtr, LEAF, ISPROCESS);
        if(state == ISPROCESS) {
            deferFragment();
            return;
        } else {
            uint brickPtr = node[nodeIndex].brickPtrX;
            uint bx = (brickPtr & 0x1FF) * 3;
            uint by = (brickPtr >> 9) * 3 ;
            ivec3 innerFrameOffset = levelOffsets[lowestLevel];
            ivec3 texturePos = ivec3(bx + innerFrameOffset.x, by + innerFrameOffset.y, innerFrameOffset.z);  
            uvec4 count = imageLoad(lock3D, texturePos);
            vec4 prevColor = imageLoad(texture3D, texturePos);
            FragmentStruct f = frag[gl_GlobalInvocationID.x];
            if(brickPtr == 0) {
                logFragment(f.position, vec4(texturePos, 777), nodeIndex, brickPtr, node[nodeIndex].childPtr, 0);
            }
            vec4 avgColor = (prevColor * count.r + frag[gl_GlobalInvocationID.x].color) / (count.r + 1);
            imageStore(texture3D, texturePos, avgColor);
            count.r = count.r + 1;
            imageStore(lock3D, texturePos, count);
            atomicCompSwap(node[nodeIndex].childPtr, ISPROCESS, LEAF);
        }
    }
    
}